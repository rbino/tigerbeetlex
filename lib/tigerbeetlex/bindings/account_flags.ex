#######################################################
# This file was auto-generated by elixir_bindings.zig #
#              Do not manually modify.                #
#######################################################

defmodule TigerBeetlex.AccountFlags do
  import Bitwise

  use TypedStruct

  @moduledoc """
  See [AccountFlags](https://docs.tigerbeetle.com/reference/account#flags).
  """
  typedstruct do
    field :linked, boolean()
    field :debits_must_not_exceed_credits, boolean()
    field :credits_must_not_exceed_debits, boolean()
    field :history, boolean()
    field :imported, boolean()
    field :closed, boolean()
  end

  @doc """
  Given a binary flags value, returns the corresponding struct.
  """
  def from_binary(<<_::binary-size(2)>> = bin) do
    <<
      _padding::10,
      closed::1,
      imported::1,
      history::1,
      credits_must_not_exceed_debits::1,
      debits_must_not_exceed_credits::1,
      linked::1
    >> = bin

    %__MODULE__{
      linked: linked == 1,
      debits_must_not_exceed_credits: debits_must_not_exceed_credits == 1,
      credits_must_not_exceed_debits: credits_must_not_exceed_debits == 1,
      history: history == 1,
      imported: imported == 1,
      closed: closed == 1
    }
  end

  @doc """
  Given a `%AccountFlags{}` struct, returns the corresponding serialized binary value.
  """
  def to_binary(flags) do
    %__MODULE__{
      linked: linked,
      debits_must_not_exceed_credits: debits_must_not_exceed_credits,
      credits_must_not_exceed_debits: credits_must_not_exceed_debits,
      history: history,
      imported: imported,
      closed: closed
    } = flags

    <<
      # padding
      0::10,
      bool_to_u1(closed)::1,
      bool_to_u1(imported)::1,
      bool_to_u1(history)::1,
      bool_to_u1(credits_must_not_exceed_debits)::1,
      bool_to_u1(debits_must_not_exceed_credits)::1,
      bool_to_u1(linked)::1
    >>
  end

  @spec bool_to_u1(b :: boolean()) :: 0 | 1
  defp bool_to_u1(true), do: 1
  defp bool_to_u1(falsy) when falsy in [nil, false], do: 0
end
