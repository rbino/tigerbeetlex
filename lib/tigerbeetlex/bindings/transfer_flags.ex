#######################################################
# This file was auto-generated by elixir_bindings.zig #
#              Do not manually modify.                #
#######################################################

defmodule TigerBeetlex.TransferFlags do
  import Bitwise

  @moduledoc """
  See [TransferFlags](https://docs.tigerbeetle.com/reference/transfer#flags).
  """

  @doc """
  See [linked](https://docs.tigerbeetle.com/reference/transfer#flagslinked).
  """
  def linked(current \\ 0) do
    current ||| 1 <<< 0
  end

  @doc """
  See [pending](https://docs.tigerbeetle.com/reference/transfer#flagspending).
  """
  def pending(current \\ 0) do
    current ||| 1 <<< 1
  end

  @doc """
  See [post_pending_transfer](https://docs.tigerbeetle.com/reference/transfer#flagspost_pending_transfer).
  """
  def post_pending_transfer(current \\ 0) do
    current ||| 1 <<< 2
  end

  @doc """
  See [void_pending_transfer](https://docs.tigerbeetle.com/reference/transfer#flagsvoid_pending_transfer).
  """
  def void_pending_transfer(current \\ 0) do
    current ||| 1 <<< 3
  end

  @doc """
  See [balancing_debit](https://docs.tigerbeetle.com/reference/transfer#flagsbalancing_debit).
  """
  def balancing_debit(current \\ 0) do
    current ||| 1 <<< 4
  end

  @doc """
  See [balancing_credit](https://docs.tigerbeetle.com/reference/transfer#flagsbalancing_credit).
  """
  def balancing_credit(current \\ 0) do
    current ||| 1 <<< 5
  end

  @doc """
  Given an integer flags value, returns a list of atoms indicating which flags are set.
  """
  def int_to_flags(int_value) when is_integer(int_value) do
    flags = []

    flags =
      if (int_value &&& linked()) != 0 do
        [:linked | flags]
      else
        flags
      end

    flags =
      if (int_value &&& pending()) != 0 do
        [:pending | flags]
      else
        flags
      end

    flags =
      if (int_value &&& post_pending_transfer()) != 0 do
        [:post_pending_transfer | flags]
      else
        flags
      end

    flags =
      if (int_value &&& void_pending_transfer()) != 0 do
        [:void_pending_transfer | flags]
      else
        flags
      end

    flags =
      if (int_value &&& balancing_debit()) != 0 do
        [:balancing_debit | flags]
      else
        flags
      end

    flags =
      if (int_value &&& balancing_credit()) != 0 do
        [:balancing_credit | flags]
      else
        flags
      end

    Enum.reverse(flags)
  end
end
